from asyncio import sleep
from .. import loader, utils
import asyncio
from telethon.tl.types import Message, ChatAdminRights
from telethon import functions, TelegramClient, errors
from ..inline.types import InlineCall
import inspect
import re
import logging

# meta developer: –±–æ–ª—å—à–∞—è —á–∞—Å—Ç—å –∫–æ–¥–∞ @kepperok –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏ —É–ª—É—á—à–µ–Ω–∏—è @tot_882
@loader.tds
class ToTalMiner(loader.Module):
    strings = {
        "name": "ToTalMiner",
        "kt": "\n‚úâÔ∏è –ë–µ–ª—ã–π:",
        "rkt": "\nüßß –¢–∞–ª–µ—Å–º–∞–Ω:",
        "k": "\nüì¶ –ö–∞—Ä–æ–±–∫–∞:",
        "rk": "\nüó≥ –ü–ª–∞—Ç–æ–∫:",
        "mif": "\n‚ö´Ô∏è –ß–æ—Ä–Ω—ã–π –∫–∞–º–µ–Ω:",
        "kr": "\nüíé –ë—Ä–∏–ª–ª–∏–∞–Ω—Ç:",
        "dk": "\nüé≤ –ö—É–±–∏–∫ —Ä—É–±–∏–∫:",
        "ssp": "\nüëú –°—É–º—á–∫–∞:",
        "pse": "\nüíº –ü–æ—Ä—Ñ–µ–ª—å —Å –¥–µ–Ω–µ–≥:",
        "zv": "\nüåå –ó–≤√´–∑–¥—ã:",
        "plasma": "\n–§–µ–π–≤–µ—Ä–∫üéÜ:"
    }
    def __init__(self):
        super().__init__()
        self.mining = False
        self.messages_sent = 0
        self.kt = 0
        self.rkt = 0
        self.k = 0
        self.rk = 0
        self.mif = 0
        self.dk = 0
        self.kr = 0
        self.ss = 0
        self.ps = 0
        self.zv = 0
        self.plasma = 0

    async def client_ready(self, client, db):
        self.bb = False
        s = self.get('dly')
        if s is None:
            self.set('dly', 1.0)
        s = self.get('mm')
        if s is None:
            self.set('mm', False)
        s = self.get('ag')
        if s is None:
            self.set('ag', False)
        s = self.get('as')
        if s is None:
            self.set('as', False)
        s = self.get('fw')
        if s is None:
            self.set('fw', False)
        if self.get("cases") == None:
            self.set("cases", {
                "kt": True,
                "rkt": True,
                "k": True,
                "rk": True,
                "mif": True,
                "kr": True,
                "dk": True,
                "zv": True,
                "ssp": True,
                "pse": True,
                "plasma": True
            })
        if self.get("kol_cases") == None:
            self.set("kol_cases", {
                "kt": 0,
                "rkt": 0,
                "k": 0,
                "rk": 0,
                "mif": 0,
                "kr": 0,
                "dk": 0,
                "zv": 0,
                "ssp": 0,
                "pse": 0,
                "plasma": 0,
                "clicks": 0
            })
        await self.continue_mining()

    @loader.watcher()
    async def watcher(self, message):
        a = self.get("kol_cases")
        if hasattr(message, 'from_id') and hasattr(message, 'chat_id') and message.from_id == 7168860714 and message.chat_id == 7168860714 and "–†—É–¥–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å" in message.raw_text:
            a["clicks"] += 1
            self.set("kol_cases", a)
            
        if hasattr(message, 'from_id') and hasattr(message, 'chat_id') and message.from_id == 7168860714 and message.chat_id == 7168860714 and "–ù–∞–π–¥–µ–Ω" in message.raw_text:
            if "‚úâ" in message.raw_text and "–ö–æ–Ω–≤–µ—Ä—Ç" in message.raw_text:
                colpt = r"\d+"
                search = re.search(colpt, message.raw_text)
                colvo = int(search[0])
                
                a["kt"] += colvo
                self.set("kol_cases", a)
            if "üßß" in message.raw_text and "–†–µ–¥–∫–∏–π –ö–æ–Ω–≤–µ—Ä—Ç" in message.raw_text:
                colpt = r"\d+"
                search = re.search(colpt, message.raw_text)
                colvo = int(search[0])
                
                a["rkt"] += colvo
                self.set("kol_cases", a)

            if "üì¶" in message.raw_text and "–ö–µ–π—Å" in message.raw_text:
                colpt = r"\d+"
                search = re.search(colpt, message.raw_text)
                colvo = int(search[0])

                a["k"] += colvo
                self.set("kol_cases", a)

            if "üó≥" in message.raw_text and "–†–µ–¥–∫–∏–π –ö–µ–π—Å" in message.raw_text:
                colpt = r"\d+"
                search = re.search(colpt, message.raw_text)
                colvo = int(search[0])

                a["rk"] += colvo
                self.set("kol_cases", a)

            if "üïã" in message.raw_text and "–ú–∏—Ñ–∏—á–µ—Å–∫–∏–π –ö–µ–π—Å" in message.raw_text:
                colpt = r"\d+"
                search = re.search(colpt, message.raw_text)
                colvo = int(search[0])

                a["mif"] += colvo
                self.set("kol_cases", a)

            if "–ü–æ—Ä—Ç—Ñ–µ–ª—å" in message.raw_text:
                colpt = r"\d+"
                search = re.search(colpt, message.raw_text)
                colvo = int(search[0])

                a["pse"] += colvo
                self.set("kol_cases", a)

            if "–°—É–º–∫–∞" in message.raw_text:    
                colpt = r"\d+"
                search = re.search(colpt, message.raw_text)
                colvo = int(search[0])

                a["ssp"] += colvo
                self.set("kol_cases", a)

            if "üíé" in message.raw_text and "–ö—Ä–∏—Å—Ç–∞–ª—å–Ω—ã–π –ö–µ–π—Å" in message.raw_text:
                colpt = r"\d+"
                search = re.search(colpt, message.raw_text)
                colvo = int(search[0])

                a["kr"] += colvo
                self.set("kol_cases", a)

            if "üé≤" in message.raw_text and "–î–∞–π—Å –ö–µ–π—Å" in message.raw_text:
                colpt = r"\d+"
                search = re.search(colpt, message.raw_text)
                colvo = int(search[0])

                a["dk"] += colvo
                self.set("kol_cases", a)

            if "üí´" in message.raw_text:
                a["zv"] += 1
                self.set("kol_cases", a)

        if hasattr(message, 'from_id') and message.from_id == 7168860714 and message.chat_id == 7168860714 and "–ü–ª–∞–∑–º–∞ +" in message.raw_text:
            plpt = r"\d+"
            search = re.search(plpt, message.raw_text)
            colvo = int(search[0])
            
            a["plasma"] += colvo
            self.set("kol_cases", a)

    @loader.command()
    async def mmm(self, message):
        '''- –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –∫–æ–ø–∞–Ω–∏–µ'''
        self.set('mm', not self.get('mm'))
        if self.get('mm'):
            await self.client.send_message(message.chat_id, "<b>‚ö°–ö–æ–ø –≤–∫–ª‚ö°")
            await message.delete()
            self.set("kol_cases", {
                "kt": 0,
                "rkt": 0,
                "k": 0,
                "rk": 0,
                "mif": 0,
                "kr": 0,
                "dk": 0,
                "zv": 0,
                "ssp": 0,
                "pse": 0,
                "plasma": 0,
                "clicks": 0
            })
            await self.continue_mining()
        else:
            cases_text=""
            a = self.get("cases")
            b = self.get("kol_cases")
            for i in a:
                if a[i]:
                    cases_text += self.strings(i)+" "+str(b[i])
            await self.client.send_message(message.chat_id, f"<b>‚ò£Ô∏è–°–ª–æ–≤–æ –±–æ–≥—É —á—Ç–æ –¥–∞–ª–∏ –æ–¥–æ—Ö–Ω—É—Ç ‚ò£Ô∏è\nüì® —è –∫–æ–ø–∞–ª –¥–ª—è —ç—Ç–æ–π —Ö—É–π–Ω–∏ –∞–∂: {b['clicks']}\nü†ó–∑–∞ –≤—Å√´ —ç—Ç–æ—Ç –≤—Ä–µ–º—è –∫–æ–≥–¥–∞ —è –±—ã–ª –µ–≥–æ —Ä–∞–±—ã–Ω—è, —è –≤—ã–∫–æ–ø–∞–ª –∞–∂  ü†ó\n{cases_text}</b>")
            await message.delete()
            

    async def continue_mining(self):
        while self.get('mm'):
            await self.client.send_message("@mine_evo_gold_bot", '–∫–æ–ø')
            await asyncio.sleep(self.get('dly'))
    async def process_mining_result(self, result_text):
        pass

    @loader.command()
    async def emdly(self, message: Message):
        '''- –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –∫–æ–ø–∞–Ω–∏—è [–∑–Ω–∞—á–µ–Ω–∏–µ]'''
        args = utils.get_args_split_by(message, " ")
        cmd = f'{utils.escape_html(self.get_prefix())}{inspect.currentframe().f_code.co_name}'
        if args:
            cmd = f'{utils.escape_html(self.get_prefix())}{inspect.currentframe().f_code.co_name} {utils.get_args_raw(message)}'
        else:
            await utils.answer(message, f'‚ùå <b>–û—à–∏–±–∫–∞ | {cmd}</b>\n–£–∫–∞–∂–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å')
            return
        if len(args) > 1:
            await utils.answer(message, f'‚ùå <b>–û—à–∏–±–∫–∞ | {cmd}</b>\n–í—ã —É–∫–∞–∑–∞–ª–∏ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∞')
            return

        zz = args[0]
        try:
            zz = float(zz)
            self.set('dly', zz)

            clicks = [100, 1000, 10000, 100000]
            times_required = [click * zz for click in clicks]

            response_text = f'‚úÖ <b>–£—Å–ø–µ—à–Ω–æ!</b>\n<i>–ó–∞–¥–µ—Ä–∂–∫–∞ –∫–æ–ø–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {zz} —Å–µ–∫—É–Ω–¥</i>\n\nüïí <b>–¢–∞–∫–∏–º —Ç–µ–º–ø–æ–º:</b>\n'
            for click, time_required in zip(clicks, times_required):
                response_text += f'üëâ {click} –∫–æ–ø–∞–Ω–∏–π –∑–∞: <b>{self.format_time(time_required)}</b>‚õè\n'

            await utils.answer(message, response_text)

        except ValueError:
            await utils.answer(message, f'‚ùå <b>–û—à–∏–±–∫–∞ | {cmd}</b>\n–£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏!')

    def format_time(self, seconds):
        minutes, seconds = divmod(seconds, 60)
        hours, minutes = divmod(minutes, 60)
        days, hours = divmod(hours, 24)
        return f'{int(days)} –¥–Ω–µ–π, {int(hours)} —á–∞—Å–æ–≤, {int(minutes)} –º–∏–Ω—É—Ç, {int(seconds)} —Å–µ–∫—É–Ω–¥'

    @loader.command()
    async def emcfg(self,message):
        '''- –ö–æ–Ω—Ñ–∏–≥ –º–æ–¥—É–ª—è MevoMiner'''
        if self.get('ag'):
            dpg = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dpg = ''
        
        if self.get('as'):
            dps = ' ‚ñ´Ô∏è <i>–í—ã–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dps = ''
        
        if self.get('fw'):
            dpf = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ FloodWait</i>\n'
        else: 
            dpf = ''
        
        if self.get('mm'):
            dpm = '–í–∫–ª—é—á–µ–Ω–æ'
        else:
            dpm = '–í—ã–∫–ª—é—á–µ–Ω–æ'
        
        await self.inline.form(
            text=f"<emoji document_id=5981043230160981261>‚è±</emoji> <b>–ó–∞–¥–µ—Ä–∂–∫–∞ –∫–æ–ø–∞–Ω–∏—è:</b> <code>{self.get('dly')}</code>\n‚õè <b>–°—Ç–∞—Ç—É—Å –∫–æ–ø–∞–Ω–∏—è:</b> <i>{dpm}</i>\n<b>‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n{dps}{dpg}{dpf}",
            message=message,
            reply_markup=[
                [
                    {
                        'text' : '‚è± –ó–∞–¥–µ—Ä–∂–∫–∞ –∫–æ–ø–∞–Ω–∏—è ',
                        'callback' : self.mdlym,
                    },
                    {
                        'text' : '‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
                        'callback' : self.idd,
                    },
                ],
                [
                    {
                        'text' : 'üîª –ó–∞–∫—Ä—ã—Ç—å',
                        'action' : 'close'
                    }
                ]
            ]
        )
    async def mdlym(self,call:InlineCall):
        if self.get('ag'):
            dpg = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dpg = ''
        
        if self.get('as'):
            dps = ' ‚ñ´Ô∏è <i>–í—ã–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dps = ''
        
        if self.get('fw'):
            dpf = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ FloodWait</i>\n'
        else: 
            dpf = ''
        
        if self.get('mm'):
            dpm = '–í–∫–ª—é—á–µ–Ω–æ'
        else:
            dpm = '–í—ã–∫–ª—é—á–µ–Ω–æ'
        await call.edit(
            text=f"<emoji document_id=5981043230160981261>‚è±</emoji> <b>–ó–∞–¥–µ—Ä–∂–∫–∞ –∫–æ–ø–∞–Ω–∏—è:</b> <code>{self.get('dly')}</code>\n‚õè <b>–°—Ç–∞—Ç—É—Å –∫–æ–ø–∞–Ω–∏—è:</b> <i>{dpm}</i>\n<b>‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n{dps}{dpg}{dpf}\n\n<i><emoji document_id=5452069934089641166>‚ùì</emoji> –ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É –∫–æ–ø–∞–Ω–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ:\n</i><code>.emdly [–∑–∞–¥–µ—Ä–∂–∫–∞]</code>",
            reply_markup=[
                [
                    {
                        'text' : '‚è± –ó–∞–¥–µ—Ä–∂–∫–∞ –∫–æ–ø–∞–Ω–∏—è ',
                        'callback' : self.mdlym,
                    },
                    {
                        'text' : '‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
                        'callback' : self.idd,
                    },
                ],
                [
                    {
                        'text' : 'üîª –ó–∞–∫—Ä—ã—Ç—å',
                        'action' : 'close'
                    }
                ]
            ]
        )
    async def iback(self,call:InlineCall):
        if self.get('ag'):
            dpg = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dpg = ''
        
        if self.get('as'):
            dps = ' ‚ñ´Ô∏è <i>–í—ã–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dps = ''
        
        if self.get('fw'):
            dpf = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ FloodWait</i>\n'
        else: 
            dpf = ''
        
        if self.get('mm'):
            dpm = '–í–∫–ª—é—á–µ–Ω–æ'
        else:
            dpm = '–í—ã–∫–ª—é—á–µ–Ω–æ'

        await call.edit(
            text=f"<emoji document_id=5981043230160981261>‚è±</emoji> <b>–ó–∞–¥–µ—Ä–∂–∫–∞ –∫–æ–ø–∞–Ω–∏—è:</b> <code>{self.get('dly')}</code>\n‚õè <b>–°—Ç–∞—Ç—É—Å –∫–æ–ø–∞–Ω–∏—è:</b> <i>{dpm}</i>\n<b>‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n{dps}{dpg}{dpf}",
            reply_markup=[
                [
                    {
                        'text' : '‚è± –ó–∞–¥–µ—Ä–∂–∫–∞ –∫–æ–ø–∞–Ω–∏—è ',
                        'callback' : self.mdlym,
                    },
                    {
                        'text' : '‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã',
                        'callback' : self.idd,
                    },
                ],
                [
                    {
                        'text' : 'üîª –ó–∞–∫—Ä—ã—Ç—å',
                        'action' : 'close'
                    }
                ]
            ]
        )
    async def idd(self,call:InlineCall):
        if self.get('ag'):
            dpg = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dpg = ''
        
        if self.get('as'):
            dps = ' ‚ñ´Ô∏è <i>–í—ã–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dps = ''
        
        if self.get('fw'):
            dpf = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ FloodWait</i>\n'
        else: 
            dpf = ''
        
        await call.edit(
            text=f'<b>‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n{dps}{dpg}{dpf}',
            reply_markup=[
                [
                    {
                        'text' : '–í—ã–∫–ª/–Ω–µ –≤—ã–∫–ª –∫–æ–ø–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞',
                        'callback' : self.ibs
                    },
                ],
                [
                    {
                        'text' : '–ö–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞',
                        'callback' : self.ibg,
                    },
                ],
                [
                    {
                        'text' : '–ö–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ FloodWait',
                        'callback' : self.ifs,
                    },
                ],
                [
                    {
                        'text' : 'üîô –ù–∞–∑–∞–¥',
                        'callback' : self.iback,
                    },
                    {
                        'text' : 'üîª –ó–∞–∫—Ä—ã—Ç—å',
                        'action' : 'close'
                    }
                ]
            ]
        )
    async def ibg(self,call:InlineCall):
        self.set('ag', not self.get('ag'))
        if self.get('ag'):
            dpg = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dpg = ''
        
        if self.get('as'):
            dps = ' ‚ñ´Ô∏è <i>–í—ã–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dps = ''
        
        if self.get('fw'):
            dpf = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ FloodWait</i>\n'
        else: 
            dpf = ''
        
        await call.edit(
            text=f'<b>‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n{dps}{dpg}{dpf}',
            reply_markup=[
                [
                    {
                        'text' : '–í—ã–∫–ª/–Ω–µ –≤—ã–∫–ª –∫–æ–ø–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞',
                        'callback' : self.ibs
                    },
                ],
                [
                    {
                        'text' : '–ö–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞',
                        'callback' : self.ibg,
                    },
                ],
                [
                    {
                        'text' : '–ö–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ FloodWait',
                        'callback' : self.ifs,
                    },
                ],
                [
                    {
                        'text' : 'üîô –ù–∞–∑–∞–¥',
                        'callback' : self.iback,
                    },
                    {
                        'text' : 'üîª –ó–∞–∫—Ä—ã—Ç—å',
                        'action' : 'close'
                    }
                ]
            ]
        )
    async def ibs(self,call:InlineCall):
        self.set('as', not self.get('as'))
        if self.get('ag'):
            dpg = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dpg = ''
        
        if self.get('as'):
            dps = ' ‚ñ´Ô∏è <i>–í—ã–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dps = ''
        
        if self.get('fw'):
            dpf = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ FloodWait</i>\n'
        else: 
            dpf = ''
        
        await call.edit(
            text=f'<b>‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n{dps}{dpg}{dpf}',
            reply_markup=[
                [
                    {
                        'text' : '–í—ã–∫–ª/–Ω–µ –≤—ã–∫–ª –∫–æ–ø–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞',
                        'callback' : self.ibs
                    },
                ],
                [
                    {
                        'text' : '–ö–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞',
                        'callback' : self.ibg,
                    },
                ],
                [
                    {
                        'text' : '–ö–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ FloodWait',
                        'callback' : self.ifs,
                    },
                ],
                [
                    {
                        'text' : 'üîô –ù–∞–∑–∞–¥',
                        'callback' : self.iback,
                    },
                    {
                        'text' : 'üîª –ó–∞–∫—Ä—ã—Ç—å',
                        'action' : 'close'
                    }
                ]
            ]
        )
    async def ifs(self,call:InlineCall):
        self.set('fw', not self.get('fw'))
        if self.get('ag'):
            dpg = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dpg = ''
        
        if self.get('as'):
            dps = ' ‚ñ´Ô∏è <i>–í—ã–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞</i>\n'
        else:
            dps = ''
        
        if self.get('fw'):
            dpf = ' ‚ñ´Ô∏è <i>–í–∫–ª—é—á–∞—Ç—å –∫–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ FloodWait</i>\n'
        else: 
            dpf = ''
        
        await call.edit(
            text=f'<b>‚ûï –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</b>\n{dps}{dpg}{dpf}',
            reply_markup=[
                [
                    {
                        'text' : '–í—ã–∫–ª/–Ω–µ –≤—ã–∫–ª –∫–æ–ø–∞–Ω–∏–µ –≤–æ –≤—Ä–µ–º—è —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞',
                        'callback' : self.ibs
                    },
                ],
                [
                    {
                        'text' : '–ö–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –±–æ—Å—Å–∞',
                        'callback' : self.ibg,
                    },
                ],
                [
                    {
                        'text' : '–ö–æ–ø–∞–Ω–∏–µ –ø–æ—Å–ª–µ FloodWait',
                        'callback' : self.ifs,
                    },
                ],
                [
                    {
                        'text' : 'üîô –ù–∞–∑–∞–¥',
                        'callback' : self.iback,
                    },
                    {
                        'text' : 'üîª –ó–∞–∫—Ä—ã—Ç—å',
                        'action' : 'close'
                    }
                ]
            ]
        )
         